# What is a Pipeline ?
======================
     a) A pipeline is a set of connected data processing elements
     b) The output of one element is used as input of the next element
     c) Elements of a pipeline can be executed in order or in parallel, depending on the underlying architecture
     d) A software pipeline defines how the output of one command can be used as input of the next command
     e) A CI/CD pipeline moves the software build process through its different stages.
   # Types of Pipelines:
   =====================
     a) Instruction Pipeline:
     ------------------------
        Defines how CPUs handle their instructions and move them forward to the next CPU component.
     b) Software Pipeline:
     ---------------------
        Defines how the output of one command can be used as input for the next command.
     c) CI/CD Pipeline:
     ------------------
        Moves the software build process through its different stages, automating steps from code integration to deployment.

# Creating Pipelines for DevOps :
=================================
     In DevOps, CI/CD is organized in pipelines to streamline and automate the software development and deployment processes.
     The pipeline automates all steps in CI/CD according to the needs of a specific environment.
     At the end of the pipeline, updated software is provided, ready for deployment.
     In a Kubernetes-based environment, the updated software is delivered using images.To make it easy to identify new versions, image tags should always be used.
   Simply : 
   =======
     CI/CD pipelines in DevOps facilitate the automated delivery of software updates, ensuring that the deployment process is efficient and consistent.
     Using image tags in Kubernetes-based environments helps in managing and identifying different software versions easily.

# Common DevOps CI/CD Stages :
==============================
  stage-1 : Pipeline Trigger:
  --------------------------
     The pipeline is triggered automatically when new code is committed.
     Webhooks are commonly used for this purpose.
  stage-2 : Code Checkout:
  -------------------------
     The code is fetched from the source repository.
  stage-3 : Code Compile:
  -----------------------
     The code is compiled to create a running application.
  stage-4 : Run Unit Tests:
  -------------------------
     Unit tests are executed to verify that individual parts of the application work as expected.
  stage-5 : Code Packaging:
  -------------------------
     The compiled code is packaged, typically by building a container image.
  stage-6 : Automated Testing:
  ----------------------------
     Automated tests are run to ensure the application works as expected.
  stage-7 : Delivery:
  -------------------
     The pipeline produces artifacts that are ready to be deployed in production.
  stage-8 : Deployment:
  ---------------------
     The artifacts are deployed, resulting in a running, updated application without any human intervention.

# DevOps and GitOps Overlap(Diff) :
==================================
  Goals:
  ------
    > The goal of DevOps is to deliver software.
    > The goal of GitOps is to deliver running applications.
  Pipeline Organization:
  ----------------------
    > These goals can be organized in a single pipeline.
    > However, it's more common to organize the DevOps procedure separately in its own pipeline and the GitOps procedure in another.

   # Simply :
   ==========
     Both DevOps and GitOps aim to streamline the delivery process, DevOps focuses on delivering software, and GitOps ensures the software is running correctly in the desired state. 
     They can be integrated into one pipeline but are often managed separately for clarity and organization.

# Creating Pipelines for GitOps CI :
====================================
    Common phases in GitOps CI include: 
    -----------------------------------
         Build                              : May occur in the DevOps pipeline.
         Test                               : May occur in the DevOps pipeline.
         Update Application Container Image : May occur in the DevOps pipeline.
         Clone Git Configuration Repository : The Git repository containing the Kubernetes manifest files is cloned.
         Change Kubernetes Manifest Files   : Update the Kubernetes manifest files to reflect the new application state or configuration.
         Commit Changed Manifest Files Back to the Git Repository : The updated manifest files are committed back to the Git repository.
         Customization                      : Steps may be added or skipped according to the needs of a specific environment.
    Simply :
    ========
      A GitOps CI pipeline includes phases for managing Kubernetes configurations, often leveraging the DevOps pipeline for building, testing, and updating container images. 
      The flexibility to add or skip steps allows for customization based on specific requirements.

# Implementing GitOps CD :
==========================
    Mission :
    ---------
      The mission of GitOps CD is to apply changed manifests to the Kubernetes infrastructure.
    Approaches :
    ------------
      a) GitOps Operator:
      -------------------
           A GitOps operator can be used to discover changes in the Git repository and automatically apply the updated manifests to the Kubernetes cluster.
     
      b) Generic CI/CD Pipeline Utilities:
      ------------------------------------
           Alternatively, generic CI/CD pipeline tools can be used to detect changes in the Git repository and apply the updated manifests to the Kubernetes cluster.

    In Simply :
    ===========
       GitOps CD focuses on synchronizing the desired state defined in Git with the actual state in the Kubernetes cluster, using either specialized GitOps operators or traditional CI/CD tools.


# Diagram Representation :
==========================
+-----------------+       +-------------------+        +-------------------+
|                 |       |                   |        |                   |
| Code Repository | <---> | DevOps Pipeline   | <--->  | Container Registry|
| (Git)           |       | (Build, Test,     |        |                   |
|                 |       | Package)          |        |                   |
+-----------------+       +-------------------+        +-------------------+
                              |              
                              |
                              v
                        +-----------------+
                        |                 |
                        | GitOps Pipeline |
                        | (Update, Commit)|
                        |                 |
                        +-----------------+
                              |
                              |
                              v
                       +---------------------+
                       |                     |
                       | Kubernetes Cluster  |
                       | (Deployment)        |
                       |                     |
                       +---------------------+
                              |
                              |
                              v
                     +----------------------+
                     |                      |
                     | Monitoring & Feedback|
                     |                      |
                     +----------------------+
    # Summary :
    ===========
      DevOps Pipeline handles code building, testing, and packaging.
      GitOps Pipeline manages configuration updates and deployments.
      Both pipelines integrate through version control, with GitOps automating deployment based on the configurations updated by DevOps.


# Getting Started with Jenkins :
=================================
 # Why Jenkins ? :
 =================
    Jenkins is software that makes it easier to build pipelines
    It provides an automated solution that allows you to shape all stages using different steps, using the Git repository as input
    Using Jenkins is optional, there are other ways to perform GitOps CI/CD if Jenkins is not used
  
 # Alternative solutions for jenkins : 
 =====================================
    AWS CodePipeline
    Gitlab Cl
    TeamCity And more

 # Using Jenkins :
 =================
    A Jenkins job represents a pipeline
    Jenkins uses Jenkinsfiles to define jobs
    For easy access in a GitOps environment, Jenkinsfiles are stored in Git repositories
 
 # Jenkins Agents :
 ==================
    Different agents are available for Jenkins
    You don't have to call a specific agent to run generic commands in a Jenkins pipeline
    Make sure that commands needed in the Jenkinsfile are installed on the Jenkins host

 # Running Jenkins as a Systemd Service :
 ========================================
    Install Docker, as the sample Jenkinsfile will run Docker commands: https://docs.docker.com/engine/install/ubuntu/
    Install Java: sudo apt install default-jre
    Install Jenkins according to the instructions found here: https://www.jenkins.io/doc/book/installing/linux/
    Ensure that optional additional programs that run from the Jenkinsfile are installed as well

 # Creating a Jenkins Pipeline :
 ===============================
    At this point, you're ready to create a Jenkins CI/CD pipeline.
    A pipeline is a script that is written in the Groovy syntax.
    In this script, different stages are defined, and each stage consists of a couple of steps.
    Jenkins pipelines can use specific agents to perform tasks
    When no generic agents are used, shell commands can be executed
    Each command that is executed as a shell command must be installed on the machine or container that runs Jenkins

 # Examining a Pipeline Script :
 ===============================
    A simple pipeline script, containing different stages, is available at https://github.com/sandervanvugt/gitops/as the file jenkinspipe
    Notice the Git repository that is used in this file
    Use git branch: 'branchename' to indicate which branch you want to use
    Add url: to refer to the specific Git repository
    The git repository will be cloned to the local Jenkins environment, and it will be updated each time the Jenkins pipeline runs
    Demo: Running the Pipeline script
    Connect to Jenkins Dashboard at localhost:8080
    Click New Item
    Enter a name: jenkinspipeline
    Select Pipeline and click OK
    Select Pipeline and set Definition to Pipeline Script
    In the script code section, manually copy contents of https://github.com/sandervanvugt/gitops/jenkinspipeline
    Click Save
    In the menu on the left, select Build Now and observe what is happening
    For more details, click the build time and date, and from there select Console Output to see messages generated on the console
